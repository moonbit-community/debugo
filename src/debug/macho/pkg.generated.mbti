// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/go/debug/macho"

// Values
const FlagAllModsBound : UInt = 0x1000

const FlagAllowStackExecution : UInt = 0x20000

const FlagAppExtensionSafe : UInt = 0x2000000

const FlagBindAtLoad : UInt = 0x8

const FlagBindsToWeak : UInt = 0x10000

const FlagCanonical : UInt = 0x4000

const FlagDeadStrippableDylib : UInt = 0x400000

const FlagDyldLink : UInt = 0x4

const FlagForceFlat : UInt = 0x100

const FlagHasTLVDescriptors : UInt = 0x800000

const FlagIncrLink : UInt = 0x2

const FlagLazyInit : UInt = 0x40

const FlagNoFixPrebinding : UInt = 0x400

const FlagNoHeapExecution : UInt = 0x1000000

const FlagNoMultiDefs : UInt = 0x200

const FlagNoReexportedDylibs : UInt = 0x100000

const FlagNoUndefs : UInt = 0x1

const FlagPIE : UInt = 0x200000

const FlagPrebindable : UInt = 0x800

const FlagPrebound : UInt = 0x10

const FlagRootSafe : UInt = 0x40000

const FlagSetuidSafe : UInt = 0x80000

const FlagSplitSegs : UInt = 0x20

const FlagSubsectionsViaSymbols : UInt = 0x2000

const FlagTwoLevel : UInt = 0x80

const FlagWeakDefines : UInt = 0x8000

const Magic32 : UInt = 0xfeedface

const Magic64 : UInt = 0xfeedfacf

const MagicFat : UInt = 0xcafebabe

fn extract_thread_state(Thread, Cpu, ByteOrder) -> ThreadState raise

let fat_arch_size : Int

let fat_header_size : Int

fn open_file(String) -> File raise

// Errors
type FormatError
fn FormatError::to_string(Self) -> String

// Types and methods
pub enum ByteOrder {
  Little
  Big
}
impl Eq for ByteOrder
impl Show for ByteOrder

pub enum Cpu {
  I386
  Amd64
  Arm
  Arm64
  Ppc
  Ppc64
  Unknown(UInt)
}
fn Cpu::from_uint(UInt) -> Self
fn Cpu::to_string(Self) -> String
fn Cpu::to_uint(Self) -> UInt
impl Eq for Cpu
impl Show for Cpu

pub struct DwarfData {
  sections : Map[Bytes, ArrayView[Byte]]
}
fn DwarfData::get_section(Self, Bytes) -> ArrayView[Byte]?
fn DwarfData::get_section_names(Self) -> Array[Bytes]
fn DwarfData::has_section(Self, Bytes) -> Bool
impl Show for DwarfData

pub struct Dylib {
  load_bytes : LoadBytes
  name : Bytes
  time : UInt
  current_version : UInt
  compat_version : UInt
}
impl Eq for Dylib
impl Show for Dylib
impl Load for Dylib

pub struct DylibCmd {
  cmd : UInt
  len : UInt
  name : UInt
  time : UInt
  current_version : UInt
  compat_version : UInt
}
impl Eq for DylibCmd
impl Show for DylibCmd

pub struct Dysymtab {
  load_bytes : LoadBytes
  ilocalsym : UInt
  nlocalsym : UInt
  iextdefsym : UInt
  nextdefsym : UInt
  iundefsym : UInt
  nundefsym : UInt
  tocoffset : UInt
  ntoc : UInt
  modtaboff : UInt
  nmodtab : UInt
  extrefsymoff : UInt
  nextrefsyms : UInt
  indirectsymoff : UInt
  nindirectsyms : UInt
  extreloff : UInt
  nextrel : UInt
  locreloff : UInt
  nlocrel : UInt
  indirect_syms : Array[UInt]
}
impl Eq for Dysymtab
impl Show for Dysymtab
impl Load for Dysymtab

pub struct DysymtabCmd {
  cmd : UInt
  len : UInt
  ilocalsym : UInt
  nlocalsym : UInt
  iextdefsym : UInt
  nextdefsym : UInt
  iundefsym : UInt
  nundefsym : UInt
  tocoffset : UInt
  ntoc : UInt
  modtaboff : UInt
  nmodtab : UInt
  extrefsymoff : UInt
  nextrefsyms : UInt
  indirectsymoff : UInt
  nindirectsyms : UInt
  extreloff : UInt
  nextrel : UInt
  locreloff : UInt
  nlocrel : UInt
}
impl Eq for DysymtabCmd
impl Show for DysymtabCmd

pub struct FatArch {
  cpu : Cpu
  sub_cpu : UInt
  offset : UInt
  size : UInt
  align : UInt
}
impl Eq for FatArch
impl Show for FatArch

pub struct FatFile {
  magic : UInt
  arches : Array[FatArch]
  files : Array[File]
}
fn FatFile::new(Bytes) -> Self raise
impl Show for FatFile

pub struct FatHeader {
  magic : UInt
  nfat_arch : UInt
}
impl Eq for FatHeader
impl Show for FatHeader

pub struct File {
  header : FileHeader
  byte_order : ByteOrder
  loads : Array[LoadCommand]
  sections : Array[Section]
  symtab : Symtab?
  dysymtab : Dysymtab?
}
fn File::dwarf(Self, Bytes) -> DwarfData? raise
fn File::imported_libraries(Self) -> Array[Bytes]
fn File::imported_symbols(Self) -> Array[Bytes]
fn File::new(Bytes) -> Self raise
fn File::section(Self, Bytes) -> Section?
fn File::segment(Self, Bytes) -> Segment?
impl Show for File

pub struct FileHeader {
  magic : UInt
  cpu : Cpu
  sub_cpu : UInt
  type_ : Type
  ncmd : UInt
  cmdsz : UInt
  flags : UInt
}
impl Eq for FileHeader
impl Show for FileHeader

pub struct LoadBytes {
  data : Bytes
}
impl Eq for LoadBytes
impl Show for LoadBytes
impl Load for LoadBytes

pub enum LoadCmd {
  Segment
  Symtab
  Thread
  UnixThread
  Dysymtab
  Dylib
  Dylinker
  Segment64
  Rpath
  Unknown(UInt)
}
fn LoadCmd::from_uint(UInt) -> Self
fn LoadCmd::to_string(Self) -> String
fn LoadCmd::to_uint(Self) -> UInt
impl Eq for LoadCmd
impl Show for LoadCmd

pub enum LoadCommand {
  LoadBytes(LoadBytes)
  Segment(Segment)
  Dylib(Dylib)
  Symtab(Symtab)
  Dysymtab(Dysymtab)
  Rpath(Rpath)
  Thread(Thread)
}
impl Show for LoadCommand
impl Load for LoadCommand

type Nlist32
impl Eq for Nlist32
impl Show for Nlist32

pub struct Nlist64 {
  name : UInt
  type_ : Byte
  sect : Byte
  desc : UInt
  value : UInt64
}
impl Eq for Nlist64
impl Show for Nlist64

pub struct Regs386 {
  ax : UInt
  bx : UInt
  cx : UInt
  dx : UInt
  di : UInt
  si : UInt
  bp : UInt
  sp : UInt
  ss : UInt
  flags : UInt
  ip : UInt
  cs : UInt
  ds : UInt
  es : UInt
  fs : UInt
  gs : UInt
}
impl Eq for Regs386
impl Show for Regs386

pub struct RegsAMD64 {
  ax : UInt64
  bx : UInt64
  cx : UInt64
  dx : UInt64
  di : UInt64
  si : UInt64
  bp : UInt64
  sp : UInt64
  r8 : UInt64
  r9 : UInt64
  r10 : UInt64
  r11 : UInt64
  r12 : UInt64
  r13 : UInt64
  r14 : UInt64
  r15 : UInt64
  ip : UInt64
  flags : UInt64
  cs : UInt64
  fs : UInt64
  gs : UInt64
}
impl Eq for RegsAMD64
impl Show for RegsAMD64

pub struct Reloc {
  addr : UInt
  value : UInt
  type_ : Int
  len : Int
  pcrel : Bool
  is_extern : Bool
  scattered : Bool
}
impl Eq for Reloc
impl Show for Reloc

pub enum RelocTypeARM {
  Vanilla
  Pair
  Sectdiff
  LocalSectdiff
  PbLaPtr
  Br24
  ThumbBr22
  Thumb32BitBranch
  Half
  HalfSectdiff
}
fn RelocTypeARM::from_int(Int) -> Self?
fn RelocTypeARM::to_int(Self) -> Int
fn RelocTypeARM::to_string(Self) -> String

pub enum RelocTypeARM64 {
  Unsigned
  Subtractor
  Branch26
  Page21
  Pageoff12
  GotLoadPage21
  GotLoadPageoff12
  PointerToGot
  TlvpLoadPage21
  TlvpLoadPageoff12
  Addend
}
fn RelocTypeARM64::from_int(Int) -> Self?
fn RelocTypeARM64::to_int(Self) -> Int
fn RelocTypeARM64::to_string(Self) -> String

pub enum RelocTypeGeneric {
  Vanilla
  Pair
  Sectdiff
  PbLaPtr
  LocalSectdiff
  Tlv
}
fn RelocTypeGeneric::from_int(Int) -> Self?
fn RelocTypeGeneric::to_int(Self) -> Int
fn RelocTypeGeneric::to_string(Self) -> String

pub enum RelocTypeX86_64 {
  Unsigned
  Signed
  Branch
  GotLoad
  Got
  Subtractor
  Signed1
  Signed2
  Signed4
  Tlv
}
fn RelocTypeX86_64::from_int(Int) -> Self?
fn RelocTypeX86_64::to_int(Self) -> Int
fn RelocTypeX86_64::to_string(Self) -> String

pub struct Rpath {
  load_bytes : LoadBytes
  path : Bytes
}
impl Eq for Rpath
impl Show for Rpath
impl Load for Rpath

type RpathCmd
impl Eq for RpathCmd
impl Show for RpathCmd

pub struct Section {
  header : SectionHeader
  relocs : Array[Reloc]
  data : Bytes?
}
fn Section::data(Self, Bytes) -> Bytes raise
impl Eq for Section
impl Show for Section

pub struct Section32 {
  name : FixedArray[Byte]
  seg : FixedArray[Byte]
  addr : UInt
  size : UInt
  offset : UInt
  align : UInt
  reloff : UInt
  nreloc : UInt
  flags : UInt
  reserve1 : UInt
  reserve2 : UInt
}
impl Eq for Section32
impl Show for Section32

pub struct Section64 {
  name : FixedArray[Byte]
  seg : FixedArray[Byte]
  addr : UInt64
  size : UInt64
  offset : UInt
  align : UInt
  reloff : UInt
  nreloc : UInt
  flags : UInt
  reserve1 : UInt
  reserve2 : UInt
  reserve3 : UInt
}
impl Eq for Section64
impl Show for Section64

pub struct SectionHeader {
  name : Bytes
  seg : Bytes
  addr : UInt64
  size : UInt64
  offset : UInt
  align : UInt
  reloff : UInt
  nreloc : UInt
  flags : UInt
}
impl Eq for SectionHeader
impl Show for SectionHeader

pub struct Segment {
  load_bytes : LoadBytes
  header : SegmentHeader
  data : Bytes?
}
fn Segment::data(Self, Bytes) -> Bytes raise
impl Eq for Segment
impl Show for Segment
impl Load for Segment

pub struct Segment32 {
  cmd : UInt
  len : UInt
  name : FixedArray[Byte]
  addr : UInt
  memsz : UInt
  offset : UInt
  filesz : UInt
  maxprot : UInt
  prot : UInt
  nsect : UInt
  flag : UInt
}
impl Eq for Segment32
impl Show for Segment32

pub struct Segment64 {
  cmd : UInt
  len : UInt
  name : FixedArray[Byte]
  addr : UInt64
  memsz : UInt64
  offset : UInt64
  filesz : UInt64
  maxprot : UInt
  prot : UInt
  nsect : UInt
  flag : UInt
}
impl Eq for Segment64
impl Show for Segment64

pub struct SegmentHeader {
  cmd : LoadCmd
  len : UInt
  name : Bytes
  addr : UInt64
  memsz : UInt64
  offset : UInt64
  filesz : UInt64
  maxprot : UInt
  prot : UInt
  nsect : UInt
  flag : UInt
}
impl Eq for SegmentHeader
impl Show for SegmentHeader

pub struct Symbol {
  name : Bytes
  type_ : Int
  sect : Int
  desc : Int
  value : UInt64
}
impl Eq for Symbol
impl Show for Symbol

pub struct Symtab {
  load_bytes : LoadBytes
  symoff : UInt
  nsyms : UInt
  stroff : UInt
  strsize : UInt
  syms : Array[Symbol]
}
impl Eq for Symtab
impl Show for Symtab
impl Load for Symtab

pub struct SymtabCmd {
  cmd : UInt
  len : UInt
  symoff : UInt
  nsyms : UInt
  stroff : UInt
  strsize : UInt
}
impl Eq for SymtabCmd
impl Show for SymtabCmd

pub struct Thread {
  load_bytes : LoadBytes
  type_ : UInt
  data : Array[UInt]
}
impl Eq for Thread
impl Show for Thread
impl Load for Thread

pub enum ThreadState {
  I386(Regs386)
  AMD64(RegsAMD64)
  Unknown(Bytes)
}
impl Show for ThreadState

pub enum Type {
  Object
  Exec
  Dylib
  Bundle
  Unknown(UInt)
}
fn Type::from_uint(UInt) -> Self
fn Type::to_string(Self) -> String
fn Type::to_uint(Self) -> UInt
impl Eq for Type
impl Show for Type

// Type aliases

// Traits
pub trait Load {
  raw(Self) -> Bytes
}

