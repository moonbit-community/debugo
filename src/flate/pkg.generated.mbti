// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/debugo/flate"

import(
  "moonbitlang/core/bytes"
  "tonyfettes/debugo/io"
)

// Values
const BestCompression : Int = 9

const BestSpeed : Int = 1

const DefaultCompression : Int = -1

const HuffmanOnly : Int = -2

const NoCompression : Int = 0

fn generate_fixed_literal_encoding() -> HuffmanEncoder

fn generate_fixed_offset_encoding() -> HuffmanEncoder

fn length_code(UInt) -> UInt

fn literal_token(UInt) -> Token

fn match_token(UInt, UInt) -> Token

fn new_writer(&@io.Writer, Int) -> Writer raise

fn offset_code(UInt) -> UInt

// Errors
pub suberror CorruptInputError Int64

pub suberror InternalError String

type InvalidCompressionLevel

pub suberror WriterClosed String

// Types and methods
type CompressionLevel
impl Show for CompressionLevel

type Compressor
fn Compressor::close(Self) -> Unit raise
fn Compressor::deflate_step(Self) -> Unit
fn Compressor::enc_speed(Self) -> Unit
fn Compressor::fill_deflate(Self, Array[Byte]) -> Int
fn Compressor::fill_store(Self, Array[Byte]) -> Int
fn Compressor::init(Self, &@io.Writer, Int) -> Unit raise InvalidCompressionLevel
fn Compressor::init_deflate(Self) -> Unit
fn Compressor::new(&@io.Writer) -> Self
fn Compressor::store(Self) -> Unit
fn Compressor::store_huff(Self) -> Unit
fn Compressor::sync_flush(Self) -> Unit raise
fn Compressor::write(Self, Array[Byte]) -> Int raise
fn Compressor::write_stored_block(Self, Array[Byte]) -> Bool
impl Show for Compressor

type DictDecoder
fn DictDecoder::avail_read(Self) -> Int
fn DictDecoder::avail_write(Self) -> Int
fn DictDecoder::hist_size(Self) -> Int
fn DictDecoder::init(Self, Int, Array[Byte]) -> Unit
fn DictDecoder::new() -> Self
fn DictDecoder::read_flush(Self) -> Array[Byte]
fn DictDecoder::try_write_copy(Self, Int, Int) -> Int
fn DictDecoder::write_byte(Self, Byte) -> Unit
fn DictDecoder::write_copy(Self, Int, Int) -> Int
fn DictDecoder::write_mark(Self, Int) -> Unit
fn DictDecoder::write_slice(Self) -> Array[Byte]
impl Show for DictDecoder

type HCode
fn HCode::set(Self, UInt, UInt) -> Unit
impl Eq for HCode
impl Show for HCode

type HuffmanBitWriter
fn HuffmanBitWriter::dynamic_size(Self, HuffmanEncoder, HuffmanEncoder, Int) -> (Int, Int)
fn HuffmanBitWriter::fixed_size(Self, Int) -> Int
fn HuffmanBitWriter::flush(Self) -> Unit
fn HuffmanBitWriter::generate_codegen(Self, Int, Int, HuffmanEncoder, HuffmanEncoder) -> Unit
fn HuffmanBitWriter::index_tokens(Self, Array[Token]) -> (Int, Int)
fn HuffmanBitWriter::new(&@io.Writer) -> Self
fn HuffmanBitWriter::reset(Self, &@io.Writer) -> Unit
fn HuffmanBitWriter::stored_size(Self, Array[Byte]) -> (Int, Bool)
fn HuffmanBitWriter::write_bits(Self, Int, UInt) -> Unit
fn HuffmanBitWriter::write_block_huff(Self, Bool, Array[Byte]) -> Unit
fn HuffmanBitWriter::write_bytes(Self, Array[Byte]) -> Unit
fn HuffmanBitWriter::write_code(Self, HCode) -> Unit
fn HuffmanBitWriter::write_dynamic_header(Self, Int, Int, Int, Bool) -> Unit
fn HuffmanBitWriter::write_fixed_header(Self, Bool) -> Unit
fn HuffmanBitWriter::write_stored_header(Self, Int, Bool) -> Unit
fn HuffmanBitWriter::write_tokens(Self, Array[Token], Array[HCode], Array[HCode]) -> Unit
impl Show for HuffmanBitWriter

type HuffmanDecoder
fn HuffmanDecoder::init(Self, Array[Int]) -> Bool
fn HuffmanDecoder::new() -> Self
impl Show for HuffmanDecoder

type HuffmanEncoder
fn HuffmanEncoder::bit_length(Self, Array[Int]) -> Int
fn HuffmanEncoder::new(Int) -> Self
impl Show for HuffmanEncoder

type LevelInfo
impl Show for LevelInfo

type LiteralNode
impl Eq for LiteralNode
impl Show for LiteralNode

type Token
fn Token::length(Self) -> UInt
fn Token::literal(Self) -> UInt
fn Token::offset(Self) -> UInt
impl Eq for Token
impl Show for Token

pub struct Writer {
  d : Compressor
  dict : Array[Byte]
}
fn Writer::flush(Self) -> Unit raise
fn Writer::write(Self, @bytes.View) -> Int raise
impl Show for Writer
impl @io.Writer for Writer

// Type aliases

// Traits

