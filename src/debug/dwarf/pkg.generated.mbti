// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/go/debug/dwarf"

import(
  "tonyfettes/go/slice"
)

// Values

// Errors
pub suberror DecodeError {
  DecodeError(name~ : String, offset~ : UInt, String)
}
fn DecodeError::new(name~ : String, offset~ : UInt, String) -> Self
impl Show for DecodeError

// Types and methods
pub struct AddrType(BasicType)
fn AddrType::inner(Self) -> BasicType

pub(all) struct ArrayType {
  common : CommonType
  type_ : &Type
  stride_size : Int64
  count : Int64
}
impl Type for ArrayType

pub enum Attr {
  AttrSibling
  AttrLocation
  AttrName
  AttrOrdering
  AttrByteSize
  AttrBitOffset
  AttrBitSize
  AttrStmtList
  AttrLowpc
  AttrHighpc
  AttrLanguage
  AttrDiscr
  AttrDiscrValue
  AttrVisibility
  AttrImport
  AttrStringLength
  AttrCommonRef
  AttrCompDir
  AttrConstValue
  AttrContainingType
  AttrDefaultValue
  AttrInline
  AttrIsOptional
  AttrLowerBound
  AttrProducer
  AttrPrototyped
  AttrReturnAddr
  AttrStartScope
  AttrStrideSize
  AttrUpperBound
  AttrAbstractOrigin
  AttrAccessibility
  AttrAddrClass
  AttrArtificial
  AttrBaseTypes
  AttrCalling
  AttrCount
  AttrDataMemberLoc
  AttrDeclColumn
  AttrDeclFile
  AttrDeclLine
  AttrDeclaration
  AttrDiscrList
  AttrEncoding
  AttrExternal
  AttrFrameBase
  AttrFriend
  AttrIdentifierCase
  AttrMacroInfo
  AttrNamelistItem
  AttrPriority
  AttrSegment
  AttrSpecification
  AttrStaticLink
  AttrType
  AttrUseLocation
  AttrVarParam
  AttrVirtuality
  AttrVtableElemLoc
  AttrAllocated
  AttrAssociated
  AttrDataLocation
  AttrStride
  AttrEntrypc
  AttrUseUTF8
  AttrExtension
  AttrRanges
  AttrTrampoline
  AttrCallColumn
  AttrCallFile
  AttrCallLine
  AttrDescription
  AttrBinaryScale
  AttrDecimalScale
  AttrSmall
  AttrDecimalSign
  AttrDigitCount
  AttrPictureString
  AttrMutable
  AttrThreadsScaled
  AttrExplicit
  AttrObjectPointer
  AttrEndianity
  AttrElemental
  AttrPure
  AttrRecursive
  AttrSignature
  AttrMainSubprogram
  AttrDataBitOffset
  AttrConstExpr
  AttrEnumClass
  AttrLinkageName
  AttrStringLengthBitSize
  AttrStringLengthByteSize
  AttrRank
  AttrStrOffsetsBase
  AttrAddrBase
  AttrRnglistsBase
  AttrDwoName
  AttrReference
  AttrRvalueReference
  AttrMacros
  AttrCallAllCalls
  AttrCallAllSourceCalls
  AttrCallAllTailCalls
  AttrCallReturnPC
  AttrCallValue
  AttrCallOrigin
  AttrCallParameter
  AttrCallPC
  AttrCallTailCall
  AttrCallTarget
  AttrCallTargetClobbered
  AttrCallDataLocation
  AttrCallDataValue
  AttrNoreturn
  AttrAlignment
  AttrExportSymbols
  AttrDeleted
  AttrDefaulted
  AttrLoclistsBase
}
fn Attr::from_uint(UInt) -> Self?
fn Attr::to_uint(Self) -> UInt
impl Eq for Attr
impl Show for Attr

pub struct BasicType {
  common : CommonType
  bit_size : Int64
  bit_offset : Int64
  data_bit_offset : Int64
}
fn BasicType::new(CommonType, Int64, Int64, Int64) -> Self
impl Show for BasicType
impl Type for BasicType

pub struct BoolType(BasicType)
fn BoolType::inner(Self) -> BasicType

pub enum ByteOrder {
  LittleEndian
  BigEndian
}
impl Eq for ByteOrder
impl Show for ByteOrder

pub struct CharType(BasicType)
fn CharType::inner(Self) -> BasicType

pub enum Class {
  ClassUnknown
  ClassAddress
  ClassBlock
  ClassConstant
  ClassExprLoc
  ClassFlag
  ClassLinePtr
  ClassLocListPtr
  ClassMacPtr
  ClassRangeListPtr
  ClassReference
  ClassReferenceSig
  ClassString
  ClassReferenceAlt
  ClassStringAlt
  ClassAddrPtr
  ClassLocList
  ClassRngList
  ClassRngListsPtr
  ClassStrOffsetsPtr
}
impl Eq for Class
impl Show for Class

pub(all) struct CommonType {
  byte_size : Int64
  name : String
}
impl Show for CommonType
impl Type for CommonType

pub struct ComplexType(BasicType)
fn ComplexType::inner(Self) -> BasicType

type Data
fn Data::add_section_simple(Self, Bytes, @slice.Slice[Byte]) -> Bool
fn Data::get_section(Self, Bytes) -> @slice.Slice[Byte]
fn Data::is_big_endian(Self) -> Bool
fn Data::reader(Self) -> Reader raise
fn Data::type_(Self, UInt) -> &Type raise

pub struct Entry {
  offset : UInt
  tag : Tag
  children : Bool
  fields : Array[Field]
}
fn Entry::attr_field(Self, Attr) -> Field?
fn Entry::new(UInt, Tag, Bool) -> Self
fn Entry::val(Self, Attr) -> FieldValue?
impl Show for Entry

pub(all) struct EnumType {
  common : CommonType
  enum_name : String
  val : Array[EnumValue]
}
impl Show for EnumType
impl Type for EnumType

pub(all) struct EnumValue {
  name : String
  val : Int64
}
impl Show for EnumValue

pub struct Field {
  attr : Attr
  val : FieldValue
  class : Class
}
fn Field::new(Attr, FieldValue, Class) -> Self
impl Show for Field

pub enum FieldValue {
  UInt64(UInt64)
  Bytes(@slice.Slice[Byte])
  Bool(Bool)
  Int64(Int64)
  String(@slice.Slice[Byte])
  Offset(UInt)
}
impl Show for FieldValue

pub struct FloatType(BasicType)
fn FloatType::inner(Self) -> BasicType

pub struct FuncType {
  common : CommonType
  return_type : &Type?
  param_type : Array[&Type]
}
impl Type for FuncType

pub struct IntType(BasicType)
fn IntType::inner(Self) -> BasicType

pub(all) struct PtrType {
  common : CommonType
  type_ : &Type
}
impl Type for PtrType

pub struct QualType {
  common : CommonType
  qual : String
  type_ : &Type
}
impl Type for QualType

type Reader
fn Reader::address_size(Self) -> Int
fn Reader::byte_order(Self) -> ByteOrder
fn Reader::next(Self) -> Entry? raise
fn Reader::offset(Self) -> UInt
fn Reader::seek(Self, UInt) -> Unit raise
fn Reader::skip_children(Self) -> Unit raise

pub(all) struct StructField {
  name : String
  type_ : &Type
  byte_offset : Int64
  byte_size : Int64
  bit_offset : Int64
  data_bit_offset : Int64
  bit_size : Int64
}

pub struct StructType {
  common : CommonType
  struct_name : String
  kind : String
  fields : Array[StructField]
  incomplete : Bool
}
fn StructType::defn(Self) -> String
impl Type for StructType

pub enum Tag {
  TagArrayType
  TagClassType
  TagEntryPoint
  TagEnumerationType
  TagFormalParameter
  TagImportedDeclaration
  TagLabel
  TagLexDwarfBlock
  TagMember
  TagPointerType
  TagReferenceType
  TagCompileUnit
  TagStringType
  TagStructType
  TagSubroutineType
  TagTypedef
  TagUnionType
  TagUnspecifiedParameters
  TagVariant
  TagCommonDwarfBlock
  TagCommonInclusion
  TagInheritance
  TagInlinedSubroutine
  TagModule
  TagPtrToMemberType
  TagSetType
  TagSubrangeType
  TagWithStmt
  TagAccessDeclaration
  TagBaseType
  TagCatchDwarfBlock
  TagConstType
  TagConstant
  TagEnumerator
  TagFileType
  TagFriend
  TagNamelist
  TagNamelistItem
  TagPackedType
  TagSubprogram
  TagTemplateTypeParameter
  TagTemplateValueParameter
  TagThrownType
  TagTryDwarfBlock
  TagVariantPart
  TagVariable
  TagVolatileType
  TagDwarfProcedure
  TagRestrictType
  TagInterfaceType
  TagNamespace
  TagImportedModule
  TagUnspecifiedType
  TagPartialUnit
  TagImportedUnit
  TagMutableType
  TagCondition
  TagSharedType
  TagTypeUnit
  TagRvalueReferenceType
  TagTemplateAlias
  TagCoarrayType
  TagGenericSubrange
  TagDynamicType
  TagAtomicType
  TagCallSite
  TagCallSiteParameter
  TagSkeletonUnit
  TagImmutableType
  Tag(UInt)
}
fn Tag::from_uint(UInt) -> Self?
fn Tag::to_uint(Self) -> UInt
impl Eq for Tag
impl Show for Tag

pub(all) struct TypedefType {
  common : CommonType
  type_ : &Type
}
impl Type for TypedefType

pub struct UcharType(BasicType)
fn UcharType::inner(Self) -> BasicType

pub struct UintType(BasicType)
fn UintType::inner(Self) -> BasicType

pub struct UnionType {
  common : CommonType
  union_name : String
  fields : Array[StructField]
}
fn UnionType::add_field(Self, StructField) -> Unit
fn UnionType::fields(Self) -> Array[StructField]
fn UnionType::new(CommonType, String) -> Self
fn UnionType::union_name(Self) -> String

pub struct Unit5 {
  mut addr_base : UInt64
  mut str_offsets_base : UInt64
  mut rng_lists_base : UInt64
  mut loc_lists_base : UInt64
}
fn Unit5::new() -> Self
impl Show for Unit5

pub struct UnspecifiedType(BasicType)
fn UnspecifiedType::inner(Self) -> BasicType

pub(all) struct UnsupportedType {
  common : CommonType
  tag : Tag
}
impl Type for UnsupportedType

pub(all) struct VoidType(CommonType)
fn VoidType::inner(Self) -> CommonType
impl Type for VoidType

// Type aliases
pub typealias UInt as Offset

// Traits
pub(open) trait Type {
  common(Self) -> CommonType
  string(Self) -> String
  size(Self) -> Int64 = _
}

