// Generated using `moon info`, DON'T EDIT IT
package "moonbit/macho"

// Values
fn copy_to_fixed_array(Bytes, Int, Int) -> FixedArray[Int] raise

fn count_load_commands_by_type(File) -> Array[(Bytes, Int)]

fn determine_byte_order(UInt) -> ByteOrder?

fn extract_thread_state(Thread, Cpu, ByteOrder) -> ThreadState raise

let fat_arch_size : Int

let fat_header_size : Int

let file_header_size_32 : Int

let file_header_size_64 : Int

fn find_section(File, Bytes) -> Section?

fn find_segment(File, Bytes) -> Segment?

let flag_all_mods_bound : UInt

let flag_allow_stack_execution : UInt

let flag_app_extension_safe : UInt

let flag_bind_at_load : UInt

let flag_binds_to_weak : UInt

let flag_canonical : UInt

let flag_dead_strippable_dylib : UInt

let flag_dyld_link : UInt

let flag_force_flat : UInt

let flag_has_tlv_descriptors : UInt

let flag_incr_link : UInt

let flag_lazy_init : UInt

let flag_no_fix_prebinding : UInt

let flag_no_heap_execution : UInt

let flag_no_multi_defs : UInt

let flag_no_reexported_dylibs : UInt

let flag_no_undefs : UInt

let flag_pie : UInt

let flag_prebindable : UInt

let flag_prebound : UInt

let flag_root_safe : UInt

let flag_setuid_safe : UInt

let flag_split_segs : UInt

let flag_subsections_via_symbols : UInt

let flag_two_level : UInt

let flag_weak_defines : UInt

fn format_regs_386(Regs386) -> String

fn format_regs_amd64(RegsAMD64) -> String

fn format_relocation(Reloc) -> String

fn format_thread_state(ThreadState) -> String

fn get_arch_count(FatFile) -> Int

fn get_arch_file(FatFile, Cpu) -> File?

fn get_architecture(File) -> String

fn get_file_summary(File) -> String

fn get_file_type(File) -> String

fn get_flags_description(File) -> Array[Bytes]

fn get_imported_libraries(File) -> Array[Bytes]

fn get_imported_symbols(File) -> Array[Bytes]

fn get_load_command_type(LoadCommand) -> Bytes

fn get_section_names(File) -> Array[Bytes]

fn get_segment_names(File) -> Array[Bytes]

fn get_supported_architectures(FatFile) -> Array[Cpu]

fn has_flag(File, UInt) -> Bool

fn is_32bit(File) -> Bool

fn is_64bit(File) -> Bool

fn is_fat(UInt) -> Bool

fn is_universal_binary(Bytes) -> Bool raise

fn is_valid_magic(UInt) -> Bool

fn is_valid_reloc_type(Int, Cpu) -> Bool

let magic_32 : UInt

let magic_64 : UInt

let magic_fat : UInt

fn new_file(Bytes) -> File raise

fn open_file(String) -> File raise

fn parse_dylib_cmd(Bytes, ByteOrder) -> Dylib raise

fn parse_dynamic_symbol_indices(Bytes, UInt, ByteOrder) -> Array[UInt] raise

fn parse_dysymtab_cmd(Bytes, ByteOrder) -> Dysymtab raise

fn parse_fat_arch(Bytes, Int) -> FatArch raise

fn parse_fat_file(Bytes) -> FatFile raise

fn parse_fat_header(Bytes, Int) -> FatHeader raise

fn parse_file(Bytes) -> File raise

fn parse_relocations(Bytes, Int, UInt, ByteOrder) -> Array[Reloc] raise

fn parse_rpath_cmd(Bytes, ByteOrder) -> Rpath raise

fn parse_section_with_relocations(Section, Bytes, ByteOrder) -> Section raise

fn parse_segment_32(Bytes, ByteOrder) -> (Segment, Array[Section]) raise

fn parse_segment_64(Bytes, ByteOrder) -> (Segment, Array[Section]) raise

fn parse_symbols(Bytes, Bytes, UInt, Bool, ByteOrder) -> Array[Symbol] raise

fn parse_symtab(Bytes, Symtab, Bool, ByteOrder) -> Symtab raise

fn parse_symtab_cmd(Bytes, ByteOrder) -> Symtab raise

fn parse_thread_state(Bytes, Cpu, ByteOrder) -> ThreadState raise

fn read_bytes(Bytes, Int, Int) -> Bytes raise

fn read_uint(Bytes, Int, ByteOrder) -> UInt raise

fn read_uint64(Bytes, Int, ByteOrder) -> UInt64 raise

fn reloc_length_bytes(Int) -> Int

// Errors
type BufferOverflowError

type FormatError

type InvalidDataError

type ParseError

// Types and methods
pub enum ByteOrder {
  Little
  Big
}
impl Eq for ByteOrder
impl Show for ByteOrder

pub enum Cpu {
  I386
  Amd64
  Arm
  Arm64
  Ppc
  Ppc64
  Unknown(UInt)
}
fn Cpu::from_uint(UInt) -> Self
fn Cpu::to_uint(Self) -> UInt
impl Eq for Cpu
impl Show for Cpu

pub struct Dylib {
  load_bytes : LoadBytes
  name : Bytes
  time : UInt
  current_version : UInt
  compat_version : UInt
}
impl Eq for Dylib
impl Show for Dylib

pub struct DylibCmd {
  cmd : UInt
  len : UInt
  name : UInt
  time : UInt
  current_version : UInt
  compat_version : UInt
}
impl Eq for DylibCmd
impl Show for DylibCmd

pub struct Dysymtab {
  load_bytes : LoadBytes
  ilocalsym : UInt
  nlocalsym : UInt
  iextdefsym : UInt
  nextdefsym : UInt
  iundefsym : UInt
  nundefsym : UInt
  tocoffset : UInt
  ntoc : UInt
  modtaboff : UInt
  nmodtab : UInt
  extrefsymoff : UInt
  nextrefsyms : UInt
  indirectsymoff : UInt
  nindirectsyms : UInt
  extreloff : UInt
  nextrel : UInt
  locreloff : UInt
  nlocrel : UInt
  indirect_syms : Array[UInt]
}
impl Eq for Dysymtab
impl Show for Dysymtab

pub struct DysymtabCmd {
  cmd : UInt
  len : UInt
  ilocalsym : UInt
  nlocalsym : UInt
  iextdefsym : UInt
  nextdefsym : UInt
  iundefsym : UInt
  nundefsym : UInt
  tocoffset : UInt
  ntoc : UInt
  modtaboff : UInt
  nmodtab : UInt
  extrefsymoff : UInt
  nextrefsyms : UInt
  indirectsymoff : UInt
  nindirectsyms : UInt
  extreloff : UInt
  nextrel : UInt
  locreloff : UInt
  nlocrel : UInt
}
impl Eq for DysymtabCmd
impl Show for DysymtabCmd

pub struct FatArch {
  cpu : Cpu
  sub_cpu : UInt
  offset : UInt
  size : UInt
  align : UInt
}
impl Eq for FatArch
impl Show for FatArch

pub struct FatFile {
  magic : UInt
  arches : Array[FatArch]
  files : Array[File]
}
impl Show for FatFile

pub struct FatHeader {
  magic : UInt
  nfat_arch : UInt
}
impl Eq for FatHeader
impl Show for FatHeader

pub struct File {
  header : FileHeader
  byte_order : ByteOrder
  loads : Array[LoadCommand]
  sections : Array[Section]
  symtab : Symtab?
  dysymtab : Dysymtab?
}
impl Show for File

pub struct FileHeader {
  magic : UInt
  cpu : Cpu
  sub_cpu : UInt
  type_ : Type
  ncmd : UInt
  cmdsz : UInt
  flags : UInt
}
impl Eq for FileHeader
impl Show for FileHeader

pub struct LoadBytes {
  data : Bytes
}
impl Eq for LoadBytes
impl Show for LoadBytes

pub enum LoadCmd {
  Segment
  Symtab
  Thread
  UnixThread
  Dysymtab
  Dylib
  Dylinker
  Segment64
  Rpath
  Unknown(UInt)
}
fn LoadCmd::from_uint(UInt) -> Self
fn LoadCmd::to_uint(Self) -> UInt
impl Eq for LoadCmd
impl Show for LoadCmd

pub enum LoadCommand {
  LoadBytes(LoadBytes)
  Segment(Segment)
  Dylib(Dylib)
  Symtab(Symtab)
  Dysymtab(Dysymtab)
  Rpath(Rpath)
  Thread(Thread)
}
impl Show for LoadCommand

pub struct Nlist32 {
  name : UInt
  type_ : Byte
  sect : Byte
  desc : UInt
  value : UInt
}
impl Eq for Nlist32
impl Show for Nlist32

pub struct Nlist64 {
  name : UInt
  type_ : Byte
  sect : Byte
  desc : UInt
  value : UInt64
}
impl Eq for Nlist64
impl Show for Nlist64

pub struct Regs386 {
  ax : UInt
  bx : UInt
  cx : UInt
  dx : UInt
  di : UInt
  si : UInt
  bp : UInt
  sp : UInt
  ss : UInt
  flags : UInt
  ip : UInt
  cs : UInt
  ds : UInt
  es : UInt
  fs : UInt
  gs : UInt
}
impl Eq for Regs386
impl Show for Regs386

pub struct RegsAMD64 {
  ax : UInt64
  bx : UInt64
  cx : UInt64
  dx : UInt64
  di : UInt64
  si : UInt64
  bp : UInt64
  sp : UInt64
  r8 : UInt64
  r9 : UInt64
  r10 : UInt64
  r11 : UInt64
  r12 : UInt64
  r13 : UInt64
  r14 : UInt64
  r15 : UInt64
  ip : UInt64
  flags : UInt64
  cs : UInt64
  fs : UInt64
  gs : UInt64
}
impl Eq for RegsAMD64
impl Show for RegsAMD64

pub struct Reloc {
  addr : UInt
  value : UInt
  type_ : Int
  len : Int
  pcrel : Bool
  is_extern : Bool
  scattered : Bool
}
impl Eq for Reloc
impl Show for Reloc

pub enum RelocTypeARM {
  ARM_RELOC_VANILLA
  ARM_RELOC_PAIR
  ARM_RELOC_SECTDIFF
  ARM_RELOC_LOCAL_SECTDIFF
  ARM_RELOC_PB_LA_PTR
  ARM_RELOC_BR24
  ARM_THUMB_RELOC_BR22
  ARM_THUMB_32BIT_BRANCH
  ARM_RELOC_HALF
  ARM_RELOC_HALF_SECTDIFF
}
fn RelocTypeARM::from_int(Int) -> Self?
fn RelocTypeARM::to_int(Self) -> Int

pub enum RelocTypeARM64 {
  ARM64_RELOC_UNSIGNED
  ARM64_RELOC_SUBTRACTOR
  ARM64_RELOC_BRANCH26
  ARM64_RELOC_PAGE21
  ARM64_RELOC_PAGEOFF12
  ARM64_RELOC_GOT_LOAD_PAGE21
  ARM64_RELOC_GOT_LOAD_PAGEOFF12
  ARM64_RELOC_POINTER_TO_GOT
  ARM64_RELOC_TLVP_LOAD_PAGE21
  ARM64_RELOC_TLVP_LOAD_PAGEOFF12
  ARM64_RELOC_ADDEND
}
fn RelocTypeARM64::from_int(Int) -> Self?
fn RelocTypeARM64::to_int(Self) -> Int

pub enum RelocTypeGeneric {
  GENERIC_RELOC_VANILLA
  GENERIC_RELOC_PAIR
  GENERIC_RELOC_SECTDIFF
  GENERIC_RELOC_PB_LA_PTR
  GENERIC_RELOC_LOCAL_SECTDIFF
  GENERIC_RELOC_TLV
}
fn RelocTypeGeneric::from_int(Int) -> Self?
fn RelocTypeGeneric::to_int(Self) -> Int

pub enum RelocTypeX86_64 {
  X86_64_RELOC_UNSIGNED
  X86_64_RELOC_SIGNED
  X86_64_RELOC_BRANCH
  X86_64_RELOC_GOT_LOAD
  X86_64_RELOC_GOT
  X86_64_RELOC_SUBTRACTOR
  X86_64_RELOC_SIGNED_1
  X86_64_RELOC_SIGNED_2
  X86_64_RELOC_SIGNED_4
  X86_64_RELOC_TLV
}
fn RelocTypeX86_64::from_int(Int) -> Self?
fn RelocTypeX86_64::to_int(Self) -> Int

pub struct Rpath {
  load_bytes : LoadBytes
  path : Bytes
}
impl Eq for Rpath
impl Show for Rpath

pub struct RpathCmd {
  cmd : UInt
  len : UInt
  path : UInt
}
impl Eq for RpathCmd
impl Show for RpathCmd

pub struct Section {
  header : SectionHeader
  relocs : Array[Reloc]
  data : Bytes?
}
fn Section::data(Self, Bytes) -> Bytes raise
impl Eq for Section
impl Show for Section

pub struct Section32 {
  name : FixedArray[Byte]
  seg : FixedArray[Byte]
  addr : UInt
  size : UInt
  offset : UInt
  align : UInt
  reloff : UInt
  nreloc : UInt
  flags : UInt
  reserve1 : UInt
  reserve2 : UInt
}
impl Eq for Section32
impl Show for Section32

pub struct Section64 {
  name : FixedArray[Byte]
  seg : FixedArray[Byte]
  addr : UInt64
  size : UInt64
  offset : UInt
  align : UInt
  reloff : UInt
  nreloc : UInt
  flags : UInt
  reserve1 : UInt
  reserve2 : UInt
  reserve3 : UInt
}
impl Eq for Section64
impl Show for Section64

pub struct SectionHeader {
  name : Bytes
  seg : Bytes
  addr : UInt64
  size : UInt64
  offset : UInt
  align : UInt
  reloff : UInt
  nreloc : UInt
  flags : UInt
}
impl Eq for SectionHeader
impl Show for SectionHeader

pub struct Segment {
  load_bytes : LoadBytes
  header : SegmentHeader
  data : Bytes?
}
fn Segment::data(Self, Bytes) -> Bytes raise
impl Eq for Segment
impl Show for Segment

pub struct Segment32 {
  cmd : UInt
  len : UInt
  name : FixedArray[Byte]
  addr : UInt
  memsz : UInt
  offset : UInt
  filesz : UInt
  maxprot : UInt
  prot : UInt
  nsect : UInt
  flag : UInt
}
impl Eq for Segment32
impl Show for Segment32

pub struct Segment64 {
  cmd : UInt
  len : UInt
  name : FixedArray[Byte]
  addr : UInt64
  memsz : UInt64
  offset : UInt64
  filesz : UInt64
  maxprot : UInt
  prot : UInt
  nsect : UInt
  flag : UInt
}
impl Eq for Segment64
impl Show for Segment64

pub struct SegmentHeader {
  cmd : LoadCmd
  len : UInt
  name : Bytes
  addr : UInt64
  memsz : UInt64
  offset : UInt64
  filesz : UInt64
  maxprot : UInt
  prot : UInt
  nsect : UInt
  flag : UInt
}
impl Eq for SegmentHeader
impl Show for SegmentHeader

pub struct Symbol {
  name : Bytes
  type_ : Int
  sect : Int
  desc : Int
  value : UInt64
}
impl Eq for Symbol
impl Show for Symbol

pub struct Symtab {
  load_bytes : LoadBytes
  symoff : UInt
  nsyms : UInt
  stroff : UInt
  strsize : UInt
  syms : Array[Symbol]
}
impl Eq for Symtab
impl Show for Symtab

pub struct SymtabCmd {
  cmd : UInt
  len : UInt
  symoff : UInt
  nsyms : UInt
  stroff : UInt
  strsize : UInt
}
impl Eq for SymtabCmd
impl Show for SymtabCmd

pub struct Thread {
  load_bytes : LoadBytes
  type_ : UInt
  data : Array[UInt]
}
impl Eq for Thread
impl Show for Thread

pub enum ThreadState {
  I386(Regs386)
  AMD64(RegsAMD64)
  Unknown(Bytes)
}
impl Show for ThreadState

pub enum Type {
  Object
  Exec
  Dylib
  Bundle
  Unknown(UInt)
}
fn Type::from_uint(UInt) -> Self
fn Type::to_uint(Self) -> UInt
impl Eq for Type
impl Show for Type

// Type aliases

// Traits
pub trait Load {
  raw(Self) -> Bytes
}

