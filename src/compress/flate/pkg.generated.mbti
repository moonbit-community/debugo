// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/go/compress/flate"

import(
  "tonyfettes/go/io"
)

// Values
const BestCompression : Int = 9

const BestSpeed : Int = 1

const DefaultCompression : Int = -1

const HuffmanOnly : Int = -2

const NoCompression : Int = 0

fn[R : @io.Reader + @io.ByteReader] new_reader(R) -> Decompressor

fn[R : @io.Reader + @io.ByteReader] new_reader_dict(R, @slice.Slice[Byte]) -> Decompressor

fn new_writer(&@io.Writer, Int) -> Writer raise

fn new_writer_dict(&@io.Writer, Int, @slice.Slice[Byte]) -> Writer raise

// Errors
pub suberror CorruptInputError Int64

pub suberror InternalError String

// Types and methods
type Decompressor
impl Resetter for Decompressor
impl @io.Closer for Decompressor
impl @io.Reader for Decompressor

type Writer
fn Writer::flush(Self) -> Unit raise
fn Writer::reset(Self, &@io.Writer) -> Unit
impl @io.Closer for Writer
impl @io.Writer for Writer

// Type aliases

// Traits
pub(open) trait Reader : @io.Reader + @io.ByteReader {
}

pub(open) trait Resetter {
  reset(Self, &Reader, @slice.Slice[Byte]) -> Unit raise
}

